# -*- coding: utf-8 -*-
"""plots.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G5LtH185CVmfV2KnmTMSQeyorY8qEB_P
"""

import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.datasets import mnist
from sklearn.decomposition import PCA
import seaborn as sns
from sklearn.manifold import TSNE
from umap import UMAP
import pandas as pd

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
test_images = test_images/255

class plotOptions:
  def __init__(self):
    (self.train_images, self.train_labels), (self.test_images, self.test_labels) = mnist.load_data()
    # Normalize the image
    self.test_images = self.test_images / 255.0
    self.test_images = self.test_images.reshape(-1, 784)

    self.dcgan_data = np.load("DCGAN_Dataset.npz", allow_pickle=True)
    self.wgan_data = np.load("WGAN_Dataset.npz", allow_pickle=True)
    print(self.dcgan_data["images"].shape)
    print(self.wgan_data["data"].shape)

  def pca(self):
    print(self.test_images.shape)
    pca_1 = PCA(n_components=2)
    pca_1.fit(self.test_images)
    test_images_pca = pca_1.transform(self.test_images)

    dcgan_images = self.dcgan_data["images"]
    dcgan_labels = self.dcgan_data["labels"]
    dcgan_images = dcgan_images.reshape(-1, 28, 28)
    dcgan_images = dcgan_images.reshape(-1, 784)
    pca_2 = PCA(n_components=2)
    pca_2.fit(dcgan_images)
    dcgan_images_pca = pca_2.transform(dcgan_images)

    wgan_images = self.wgan_data["data"]
    wgan_labels = self.wgan_data["labels"]
    wgan_images = wgan_images.reshape(-1, 784)
    pca_3 = PCA(n_components=2)
    pca_3.fit(wgan_images)
    wgan_images_pca = pca_3.transform(wgan_images)

    plt.figure(figsize=(18, 6))
    plt.subplot(1, 3, 1)
    sns.scatterplot(x=test_images_pca[:,0], y=test_images_pca[:,1], hue=self.test_labels, palette='tab10',alpha=0.5)
    plt.title('PCA of MNIST')

    # Plot MNIST PCA
    plt.subplot(1, 3, 2)
    sns.scatterplot(x=dcgan_images_pca[:,0], y=dcgan_images_pca[:,1], hue=dcgan_labels, palette='tab10', alpha=0.5)
    plt.title('PCA of DCGAN')

    # Plot CIFAR-10 t-SNE
    plt.subplot(1, 3, 3)
    sns.scatterplot(x=wgan_images_pca[:,0], y=wgan_images_pca[:,1], hue=wgan_labels, palette='tab10',alpha=0.5)
    plt.title('PCA of WGAN')

    plt.tight_layout()
    plt.show()

  def tsne(self):
    tsne_1 = TSNE(n_components=2, random_state=0)
    test_images_tsne = tsne_1.fit_transform(self.test_images)
    #test_images_tsne = tsne_1.transform(self.test_images)

    dcgan_images = self.dcgan_data["images"]
    dcgan_labels = self.dcgan_data["labels"]
    dcgan_images = dcgan_images.reshape(-1, 28, 28)
    dcgan_images = dcgan_images.reshape(-1, 784)
    tsne_2 = TSNE(n_components=2, random_state=0)
    dcgan_images_tsne = tsne_2.fit_transform(dcgan_images)
    #dcgan_images_tsne = tsne_2.transform(dcgan_images)

    wgan_images = self.wgan_data["data"]
    wgan_labels = self.wgan_data["labels"]
    wgan_images = wgan_images.reshape(-1, 784)
    tsne_3 = TSNE(n_components=2, random_state=0)
    wgan_images_tsne = tsne_3.fit_transform(wgan_images)
    #wgan_images_pca = tsne_3.transform(wgan_images)

    plt.figure(figsize=(18, 6))
    plt.subplot(1, 3, 1)
    sns.scatterplot(x=test_images_tsne[:,0], y=test_images_tsne[:,1], hue=self.test_labels, palette='tab10', alpha=0.5)
    plt.title('TSNE of MNIST')

    plt.subplot(1, 3, 2)
    sns.scatterplot(x=dcgan_images_tsne[:,0], y=dcgan_images_tsne[:,1], hue=dcgan_labels, palette='tab10', alpha=0.5)
    plt.title('TSNE of DCGAN')

    # Plot CIFAR-10 t-SNE
    plt.subplot(1, 3, 3)
    sns.scatterplot(x=wgan_images_tsne[:,0], y=wgan_images_tsne[:,1], hue=wgan_labels, palette='tab10', alpha=0.5)
    plt.title('TSNE of WGAN')

    plt.tight_layout()
    plt.show()

  def umap(self):
    umap_1 = UMAP(n_components=2)
    test_images_umap = umap_1.fit_transform(self.test_images)

    dcgan_images = self.dcgan_data["images"]
    dcgan_labels = self.dcgan_data["labels"]
    dcgan_images = dcgan_images.reshape(-1, 28, 28)
    dcgan_images = dcgan_images.reshape(-1, 784)
    umap_2 = UMAP(n_components=2)
    dcgan_images_umap = umap_2.fit_transform(dcgan_images)

    wgan_images = self.wgan_data["data"]
    wgan_labels = self.wgan_data["labels"]
    wgan_images = wgan_images.reshape(-1, 784)
    umap_3 = UMAP(n_components=2)
    wgan_images_umap = umap_3.fit_transform(wgan_images)

    plt.figure(figsize=(18, 6))
    plt.subplot(1, 3, 1)
    sns.scatterplot(x=test_images_umap[:,0], y=test_images_umap[:,1], hue=self.test_labels, palette='tab10', alpha=0.5)
    plt.title('UMAP of MNIST')

    plt.subplot(1, 3, 2)
    sns.scatterplot(x=dcgan_images_umap[:,0], y=dcgan_images_umap[:,1], hue=dcgan_labels, palette='tab10', alpha=0.5)
    plt.title('UMAP of DCGAN')

    plt.subplot(1, 3, 3)
    sns.scatterplot(x=wgan_images_umap[:,0], y=wgan_images_umap[:,1], hue=wgan_labels, palette='tab10', alpha=0.5)
    plt.title('WGAN of WGAN')

    plt.tight_layout()
    plt.show()

visualizer = plotOptions()
#visualizer.pca()

visualizer.tsne()
visualizer.pca()
visualizer.umap()

